#+STARTUP: indent inlineimages fninline
#+OPTIONS: ^:nil
#+OPTIONS: \n:t
この本のSilicon Labsのアプリケーション開発の基礎シリーズは、Bluetooth低エネルギー技術の概要を提供します。
従来のBluetooth技術は、電力効率の良い方法で高品質のデータを安定して送信するために最適化されています。
Bluetooth LE 技術は、長距離無線接続の短時間バーストを可能にし、長いバッテリ寿命に依存し、高スループットのストリーミングデータを必要としないアプリケーションに最適です。
この概要では、Bluetooth低エネルギー技術に焦点を当てていますが、従来のBluetooth技術と対照的な点もいくつか挙げています。

Silicon Labsのアプリケーション開発の基礎シリーズは、Silicon Labsチップ、EmberZNet PROやSilicon Labs Bluetooth低エネルギーなどのネットワーキングスタック、および関連する開発を使用して、組み込みネットワーキングソリューションを開発する前に、プロジェクトマネージャ、アプリケーション設計者、開発ツール。このドキュメントは、ワイヤレスネットワークアプリケーションの開発を紹介する人や、Silicon Labs開発環境の初心者を対象としています。

* Background
Silicon Labsは、IoT（Internet of Things）と呼ばれる家庭内の常時接続されたデバイスの世界に移行する際に、顧客の要求を満たすように設計された製品を開発しています。
高いレベルでは、Silicon LabsのIoTの目標は次のとおりです。
- 家庭内のすべてのデバイスを、ZigBee PRO、スレッド、Bluetooth低エネルギーテクノロジ、その他新興標準のいずれであっても、クラス最高のネットワーキングで接続します。
- エネルギーに優しいマイクロコントローラに関する当社の専門知識を活用する。
- 確立された低電力、ミックスド・シグナル・チップを強化する。既存のイーサネットおよびWi-Fiデバイスに低コストのブリッジを提供します。
- スマートフォンやタブレットへのクラウドサービスと接続を可能にし、使いやすさと共通のユーザーエクスペリエンスを顧客に提供します。

これらの目標をすべて達成することで、Connected HomeのIoTデバイスの採用率とユーザーの受け入れが向上します。
Bluetooth技術は、IoTの中核部分です。
Bluetoothは、無線伝送を使用してデータを交換することによって、ケーブル接続の代替無線を提供するように設計されていました。
Bluetoothの最も一般的なアプリケーションの1つは、ワイヤレスオーディオです。
これは、BR/EDR（Bit Rate / Enhanced Data Rate）と呼ばれるBluetoothのバージョンを使用しています。
これは、高品質のデータを電力効率の良い方法で安定して送信するために最適化されています。
Bluetoothバージョン4.0は、低エネルギー機能を備えたBluetoothを発表しました。
開発者は、コイン型電池で数ヶ月、さらには数年も稼働できるセンサーを開発することができます。
これらのセンサの中には、スイッチを反転させることによる運動エネルギーが動作電力を提供できるほど効率的であるものがあります。
Bluetoothの低エネルギー技術は本質的にBR/EDRとは異なります。
BR/EDRは、比較的短距離の連続無線接続を確立し、スマートフォンからヘッドセットへの音声ストリーミングなどの用途に最適です。
Bluetoothの低エネルギー技術は長距離無線接続の短時間バーストを可能にし、長いバッテリ寿命に依存するIoTアプリケーションに最適です。
さらに、Bluetooth低エネルギー技術は、GATT（Generic Attributes）を使用したまったく新しい開発フレームワーク上に構築されています。
GATTプロファイルは、GATT機能に基づくユースケース、ロール、および一般的な動作を記述します。
これらのプロファイルにより、開発者はスマートフォン、PC、タブレット上で動作するアプリケーションにデバイスを直接接続するためのアプリケーションを素早く簡単に開発できます。
Bluetoothデバイスは、BR/EDRとBluetooth低エネルギーテクノロジの両方をサポートするデュアルモード、またはBluetooth低エネルギーテクノロジのみをサポートするシングルモードのいずれかになります。

スマートフォン、PC、タブレットなどの超低消費電力と接続性だけでなく、Bluetooth低エネルギー技術の他のメリットは次のとおりです。
- 低価格
- 信頼性と堅牢性:AFH（Adaptive Frequency Hopping）、再送信、24ビットCRC（巡回冗長検査）
- セキュア:ペアリング、ボンディング、プライバシー、MITM（Man in the Middle）保護、AES-128暗号化
- 迅速な開発をサポート:•主要な使用事例（HR、HID、グルコース、近接性など）をカバーする標準化されたプロファイル
- プロファイルはアプリケーションとして開発でき、迅速な展開をサポートします
- ベンダー固有のプロファイルでは、Bluetooth SIGがプロファイルとオペレーティングシステム開発者を統一するのを待つ必要がなくなります
- 幅広く導入可能:iOS、Android 4.3以降、Windows 8,10、OSX、Linuxの主要なプラットフォームでサポートされています。Bluetooth仕様はBluetooth SIG（Special Interest Group）によって管理されています。SIGは、入門情報と仕様へのリンクとその他の技術的詳細の両方を含むウェブサイト（https://www.bluetooth.com） を管理しています。このドキュメントでは、仕様の改訂は括弧で括られています。ここで、（BT5.0）は仕様のバージョン5.0を意味します。

このドキュメントでは、Bluetooth低エネルギーの次の側面の概要を説明します。
- Bluetoothアーキテクチャの概要
- ラジオ機能
- リンクレイヤの基本
- デバイスの検出と接続の仕組みの説明
- Bluetoothセキュリティの概要
- 属性プロトコル
- 汎用属性プロファイル（GATT）とBluetoothプロファイル

* Bluetooth Low Energy Architecture
Bluetooth LE アーキテクチャを次の図に示します。
[[file:Bluetooth LE Architecture.png][Bluetooth LE Architecture]]

コンポーネントは次のとおりです。
- 物理層:無線の送受信を制御します。
- リンクレイヤ: パケット構造を定義し、ステートマシンと無線コントロールを含み、リンクレイヤレベルの暗号化を提供します。

これらの2つのレイヤーはコントローラにグループ化され、残りのレイヤーはホストにグループ化されます。
ホスト-コントローラインタフェース（HCI）は、コントローラとホスト間の通信を標準化します。
ホスト層は次のとおりです。
- L2CAP:論理リンク制御と適応プロトコル。 L2CAPはプロトコルマルチプレクサとして機能し、パケットのセグメント化と再アセンブリを処理します。また、1つまたは複数の論理リンクを介して多重化された論理チャネルを提供します。Bluetooth LE 技術で使用されるL2CAPは、従来のBluetooth L2CAPに基づいて最適化され、簡素化されたプロトコルです。通常、アプリケーション開発者はL2CAPレイヤーとのやりとりの詳細を気にする必要はありません。相互作用はBluetoothスタックによって処理され、L2CAP操作の詳細はこのドキュメントでは扱いません。
- ATT: 属性プロトコル。属性プロトコルは、Bluetooth LE デバイス間でデータを送信する手段を提供する。それは、Bluetooth LE 接続に依存し、その接続を介して属性値を読み書きし、指示し、通知する手順を提供する。ATTは、ほとんどのBluetooth LE アプリケーションで、時にはBR/EDRアプリケーションで使用されます。
- GATT:汎用属性プロファイル。 GATTは、個々の属性を論理サービス（例えば、心拍センサの動作を公開する心拍サービス）にグループ化するために使用されます。実際のデータに加えて、GATTは、属性、すなわちアクセス方法と必要なセキュリティレベルに関する情報も提供します
- GAP:汎用アクセスプロファイル。GAPレイヤは、Bluetooth LE デバイスが自分自身または他のデバイスをAdvertiseし、デバイス発見を行い、接続を開いて管理し、データをブロードキャストする手段を提供します。
- SM:セキュリティマネージャ。デバイスの結合、データの暗号化と復号化、デバイスのプライバシーを有効にする手段を提供します。

これらのコンポーネントについては、以降のセクションで詳しく説明します。

* Physical Layer
Bluetooth LE は2.4GHz ISM（産業科学医療）帯域（2402 MHz〜2480 MHz）で動作します。
これはほとんどの国でライセンスフリーです。Bluetooth 4仕様では、40 MHzのRFチャネルと2 MHzのチャネル間隔が定義されています（次の図を参照）。
40チャネルのうち3つは、デバイスの検出、接続の確立、およびブロードキャストに使用されるAdvertising Channel（緑色で表示）です。Advertise Channelの周波数は、いくつかの国で一般的に使用されているIEEE 802.11チャネル1,6,11からの干渉を最小限に抑えるように選択されています。
Bluetooth 5仕様では、以下で強調表示されている3つのAdvertiseチャネルを1次Advertiseチャネルと呼びます。37個の残りのチャネルは、追加のAdvertiseデータ送信に使用できる二次Advertiseチャネルまたはデータチャネルとして使用される。

[[file:Bluetoot Low Energy Channels and Frequencies.png][Bluetooth Low Energy Channels Frequencies]]

データチャネルは、接続されたデバイス間の双方向通信に使用されます。
AFH（Adaptive FHSS）は、所定の時間間隔の間、通信のためのデータチャネルを選択するために使用される。
AFHは信頼性が高く、堅牢で、干渉に適応します。
すべての物理チャネルは、変調指数が0.5であるGFSK（Gaussian Frequency Shift Keying）変調を使用し、ピーク電力消費を低減します。
Bluetooth 4.0, 4.1, 4.2仕様では、物理層のデータレートは1Mbpsです。
Bluetooth 5標準では、スループットを向上させたり、TXとRXの時間を短縮するために、2M PHYレートを追加しています。
Bluetooth規格および規制規格の最近の変更により、Bluetooth Smartデバイスは最大100mW（20dBm）の送信電力を送信できます。
しかし、干渉が大きい場合、Bluetooth低エネルギー無線が2つのRFチャネルに降下する可能性があるので、すべての国が100mWの送信電力を使用できるわけではありません。
Bluetooth低エネルギー無線の要件は次のとおりです。

| Feature                | Value              |
|------------------------+--------------------|
| /                      | <>                 |
|------------------------+--------------------|
| Minimum TX power       | 0.01 mW (-20 dBm)  |
|------------------------+--------------------|
| Maximum TX power       | 100 mW (20 dBm)    |
|------------------------+--------------------|
| Minimum RX sensitivity | -70 dBm (BER 0.1%) |

Bluetooth低エネルギー無線の一般的な距離範囲は次のとおりです。

| TX power | RX sensitivity | Antenna gain | Range      |
|----------+----------------+--------------+------------|
| /        | <>             | <>           | <>         |
|----------+----------------+--------------+------------|
| 0 dBm    | -92 dBm        | -5 dB        | 160 meters |
|----------+----------------+--------------+------------|
| 10 dBm   | -92 dBm        | -5 dB        | 295 meters |

スマートフォンの範囲は、電話機のRF性能が限られているため、通常0〜50メートルです。

* Link Layer
Bluetooth LE リンク層は、生の無線操作とビットストリームの送受信を介した第1レベルの制御およびデータ構造を提供します。例えば、リンク層は以下を定義する。
- Bluetoothステートマシンと状態遷移
- データとAdvertiseのパケットフォーマット
- リンクレイヤー操作
- 接続、パケットタイミング、再送信
- リンクレイヤレベルのセキュリティ

アプリケーション開発者はこれらを詳細に理解する必要はありませんが、アプリケーションの設計、開発、およびエンドデバイスの動作にはいくつかの重要な概念が影響します。
これらの概念の概要は、このセクションで提供されています。

** Link Layer Operations
このセクションでは、以下を含むBluetooth LE リンク層の基本操作について説明します。
- Advertising
- Scanning
- 接続の確立

*** Advertisement
Advertisementは、Bluetooth LE 無線技術における最も基本的な操作の1つです。
Advertisementは、デバイスが存在をブロードキャストし、接続を確立させ、オプションとして、サポートされているサービスのリスト、またはデバイス名とTX電力レベルのようなデータをブロードキャストする手段を提供します。
Advertiseを行っているBluetooth LE デバイスは、1つまたは複数のAdvertiseチャネルでパケットをブロードキャストします。

[[file:Bluetooth Low Energy Advertisement.png][Bluetooth Low Energy Advertisement]]

アプリケーションは、通常、以下のAdvertisementパラメータの制御を有します。
| Parameter              | Values                                                                     | Description                                                                                                                                                                                                                                            |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| /                      | <>                                                                         | <>                                                                                                                                                                                                                                                     |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Advertisement interval | 20 ms to 10240 ms                                                          | Defines the interval between the advertisement events. Each event consist of 1 to 3 advertisement packets depending on the configuration. A random 0-10 ms is added by the link layer to every advertisement interval to help avoid packet collisions. |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Advertisement channels | 37, 38 and 39 (primary channels) 0-10 and 11-36 (BT 5 secondary channels)  | The physical RF channels used to transmit the advertisement packets. For most reliable operation all channels should be used, but reducing the number of channels used will reduce power consumption at the cost of reliability.                       |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Discoverability mode   | Not discoverable Generic Discoverable  Limited Discoverable Broadcast      | Defines how the advertiser is visible to other devices.                                                                                                                                                                                                |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Connectability mode    | Not connectable Directed Connectable Undirected connectable                | Defines if the advertiser can be connected or not                                                                                                                                                                                                      |
|------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Payload                | 0 to 31 B (primary advertisement) 0 to 255 B (BT5 secondary advertisement) | 0-31 bytes of data can be included in each primary advertisement packet. 0-255 bytes of data can be included in each secondary advertisement packet (Bluetooth 5)                                                                                      |

*** Scanning
スキャンとは、スキャナが、Advertiseデバイスによってブロードキャストされたデータを発見し、発見と接続し、または単に受信するために、到来するAdvertiseをListenする動作である。
パッシブスキャン（6ページの図4.2パッシブスキャン）とアクティブスキャン（8ページの図4.3アクティブスキャン）の2種類のスキャンモードがサポートされています。
パッシブスキャンモードでは、スキャナは着信Advertiseパケットを単にListenします。
スキャナは、一度に1つのチャンネルを聞いてラウンドロビン方式で各Advertiseチャネルを循環します。

[[file:Passive Scanning.png][Passive Scanning]]

アクティブスキャンモードでは、スキャナは着信アドバタイズパケットをListenし、受信したアドバタイズパケットを受信すると、それについての詳細を知るために追加のスキャン要求パケットを広告主に送信します。
通常、スキャン応答には、サポートされているサービスやわかりやすい名前のリストなどの情報が含まれていますが、アプリケーションはスキャン応答データのペイロードを完全に制御しています。

[[file:Active Scanning.png][Active Scanning]]

アプリケーションは、通常、次のスキャンパラメータを制御します。

| Parameter           | Values                | Description                                                                                                                                 |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| /                   | <>                    | <>                                                                                                                                          |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Scan interval       | 2.5 ms to 10240 ms    | The interval is ms from the beginning of a scan event to a beginning of a consecutive scan event. Must be equal or larger than scan window. |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Scan window         | 2.5 ms to 10240 ms    | The scan window defines the duration of the listening (RX) window during a scan event.                                                      |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Scan type           | Limited               | Defines which type of advertisers the scanner reports.                                                                                      |
|                     | Generic               |                                                                                                                                             |
|                     | Observation           |                                                                                                                                             |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Scan mode           | Active                | Defines if active or passive scanning is performed.                                                                                         |
|                     | Passive               |                                                                                                                                             |
|---------------------+-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------|
| Connectability mode | Not connectable       | Defines if the advertiser can be connected to or not                                                                                        |
|                     | Directed Connectable  |                                                                                                                                             |
|                     | Undirected Connectabe |                                                                                                                                             |

*** Connections
Bluetooth LE 接続では、正しいデータ配信を保証するために、紛失したデータのCRC、肯定応答、および再送信を使用することで、
Connectionsによりアプリケーションデータを信頼性が高く堅牢な方法で送信できます。
さらに、Bluetooth LE 接続は、周囲のRF条件を検出し適応させ、信頼性の高い物理層を提供するために、適応周波数ホッピング（AFH）を使用します。
Connectionsはまた、データの暗号化と復号化をサポートして機密性を保証します。
Bluetooth LE 接続は、常に、Advertise主が接続を許可するという事実を含むAdvertisementパケットを受信するスキャナによって開始される。
次の図は、Bluetooth LE 接続の確立方法を示しています。

[[file:Connections.png][Connections]]

アプリケーションは、通常、次の接続パラメータを制御します。

| Parameter                  | Values                          | Description                                            |
|----------------------------+---------------------------------+--------------------------------------------------------|
| /                          | <>                              | <>                                                     |
|----------------------------+---------------------------------+--------------------------------------------------------|
| hMinimum Connection        | Interval 7.5 ms                 | Minimum allowed connection interval                    |
|----------------------------+---------------------------------+--------------------------------------------------------|
| Maximum Connection         | Interval 4000 ms                | Maximum allowed connection interval                    |
|----------------------------+---------------------------------+--------------------------------------------------------|
| Connection (slave) latency | 0 to 500 (connection intervals) | The amount of connection events the slave is allowed   |
|                            |                                 | to skip if it has no data to send.                     |
|----------------------------+---------------------------------+--------------------------------------------------------|
| Supervision timeout        | 100 ms to 32000 ms              | Defines how long the break in communications can be    |
|                            |                                 | (for example due to out of range situation) before the |
|                            |                                 | connection is dropped and an error is presented to the |
|                            |                                 | user.                                                  |

接続パラメータは、接続更新メッセージを使用して接続のライフタイム中に更新することができる。

マスターが定義された接続間隔でスレーブにパケットを送信すると、接続イベント（Connection Timelineの図）が開始されます。
スレーブは、マスターからのパケットを受信した後、150μsに応答することができます。
スレーブが送信するデータがない場合は、スレーブ待ち時間パラメータで定義された一定数の接続イベントをスキップできます（Connection Timelineの図）。
スーパーバイザタイムアウトによって定義された時間内にパケットがマスタまたはスレーブによって受信されない場合、接続は終了する。

[[file:Connection Timeline.png][Connection Timeline]]

[[file:Slave Latency(Latency 3).png][Slave Latency]]

スレーブが送信するデータの量が単一パケットに収まらない場合、接続イベントは自動的に延長され、
スレーブは次の接続間隔の開始までの時間があるときにパケットを送信することができます。
これは、肯定応答を必要としない属性プロトコル操作でのみ使用できます。

** Network Topologies
Bluetooth LE 技術におけるデバイスの役割は次のとおりです。
- Advertiser :: Advertiseパケットをブロードキャストしますが、受信できないデバイス。接続を許可または拒否できます。
- Sccaner :: AdvertisementsのみをListenするデバイス。それはAdvertiserに接続することができます。
- Slave :: 1つのマスタ（BT 4.0）または複数のマスタ（BT 4.1以降）に接続されたデバイス。
- Master :: 1つまたは複数のスレーブに接続されているデバイス。理論的には、マスターには無制限のスレーブデバイスを接続することができますが、実際にはマスターは一度に4〜20スレーブを接続できます。
- Hybrid :: デバイスが同時にアドバタイズとスキャンを行うこと、またはマスターに接続して同時にアドバタイズまたはスキャンすることが可能です。
ただし、これはベンダー固有であり、サポートされている正確な機能はベンダーに確認されるべきです。 Bluetooth LE Topologiesの例を以下の2つの図に示します。

[[file:Bluetooth Low Energy Topologies.png][Bluetooth Low Energy Topologies]]

デバイスは、次の図に示すように、役割とトポロジを変更できます。

[[file:Topology and Role Change.png][Topology and Role Change]]

* Generic Access Profile (GAP)
Generic Access ProfileまたはGAPは、Bluetooth Low Energy開発者が晒される最初の層の1つです。
これは、GAPを使用して、あるデバイスが他のデバイスによって検出可能になったり、接続可能になったりする方法や、リモートデバイスを検出して接続する方法を制御するからです。
これを簡単に説明すると、GAPは、セクション4.1の「リンク層操作」で説明されているリンク層操作へのアクセスを提供します。これは、デバイス検出、接続
の確立および終了、ならびに接続タイミング制御を含みます。

GAPは、基盤となるコントローラに特定の要件を提供するデバイスロールを定義します。
役割により、デバイスは、送信（TX）のみ、受信（RX）のみ、またはその両方を行う無線機を持つことができます。
- Broadcaster（TXのみ） :: advertisingイベントとブロードキャストデータを送信します。
- Observer（RXのみ） :: Advertisingイベントとブロードキャストデータをリッスンします。
- Peripheral（RXおよびTX） :: 常にスレーブで、接続可能でAdvertisingを出します。 Central roleのデバイスとの単一の接続を使用する単純なデバイス向けに設計されています。
- Central（RXおよびTX） :: 常にマスターであり、advertisesしないでください。複数の接続の開始と管理を担当するデバイス向けに設計されています。

デバイスは複数の役割をサポートできますが、同時に1つの役割のみを採用できます。
GAPでは、検出、接続、および結合のためのモードと手順も定義されています。
基本的な技術は異なる場合がありますが、用語はBluetooth Low EnergyとBR/EDRで同じです。

モード: 
- Connectable :: 接続できます。状態:接続不可 または 接続可能。
- Discoverable :: 発見（is advertising）されます。状態:None, limited, general
- Bondable :: 接続可能であれば、接続されたデバイスと長期的な接続を行います。State : Non-bondable, bondable

手順: 
- Name discovery :: メニューに移動して、他のデバイスの名前を見つけます。この名前は、デュアルモードデバイスのBR/EDRと共有されます。
- Device discovery :: 接続に使用できるデバイスを検索します。
 - デバイスのアドレスと名前を検索します。
 - デバイスの役割を定義する。
- Link establishment :: advertisingデバイスを選択した後、それに接続します。
 - CONNECT_REQを送信するようにLinkレイヤに指示します。
 - サービスの検出を実行します。
 - デバイス認証を要求します（データ認証ではない）。
 - サービスの利用を要求します。
- Service discovery :: ピアデバイス上で利用可能なサービスを見つけるために、CentralおよびPeripheralロールのデバイスで使用されます。

* Attribute Protocol (ATT)
Bluetooth Low Energy プロファイルは、デバイスの状態を公開します。
状態は、属性と呼ばれる1つ以上の値として公開されます。
これらの属性にアクセスするためのプロトコルは、属性プロトコル（ATT）と呼ばれます。
ATTは、専用のL2CAPチャネルの上に、それぞれサーバとクライアントの役割を果たす2つのデバイス間の通信を定義します。
属性プロトコルは、2つの役割を定義します。
- サーバー :: 1つ以上の属性としてデータを格納するデバイス
- クライアント :: 1つ以上のサーバーの情報を収集するデバイス

クライアントは、サーバーからの応答メッセージをトリガーする要求を送信することによって、サーバーの属性にアクセスできます。
さらに効率を上げるために、サーバーは属性を含む2種類の迷惑なメッセージをクライアントに送信することもできます。
それは、未確認の通知と、クライアントが確認を送信する必要があることの表示です。
クライアントは属性値を書き込むためにサーバにコマンドを送信することもできます。
要求/応答および表示/確認トランザクションは、ストップアンドウェイト方式に従います。
このセクションでは、属性について説明し、プロトコルメソッドの概要を示します。

[[file:Device Roles.png][Device Roles]]

** Attributes
属性は、次の例に示すように、0〜512バイトの範囲で変更可能な配列で、固定長または可変長にすることができます。

Example
|                                        Value |
|----------------------------------------------|
|                                       0x0000 |
|----------------------------------------------|
| 0x426c75656769676120546563686e6f6c6f67696573 | 

次の例に示すように、すべての属性にはハンドルがあり、個々の属性に対処するために使用されます。
クライアントはハンドルを使用してサーバーの属性にアクセスします。  

| Handle |                                       Value |
|--------+---------------------------------------------|
| 0x0001 |                                      0x0000 |
|--------+---------------------------------------------|
| 0x0002 | 0x426c75656769676120546563686e6f6c6f6769657 |

属性には、次の例に示すように、UUID（Universally Unique Identifier）で記述される型もあります。
UUIDは、属性値の意味を決定します。
2種類のUUIDが使用されます。
- 特性仕様（https://www.bluetooth.com/specifications/bluetooth-corespecification） で定義されている、グローバルに一意の16ビットUUID
- 製造元固有の128ビットUUID。オンラインで生成できます（例: https://www.uuidgenerator.net/）

Example
| Handle  |   UUID |                                       Value | Description        |
|---------+--------+---------------------------------------------+--------------------|
| 0x0001  | 0x1804 |                                      0x0000 | TX power as dBm    |
|---------+--------+---------------------------------------------+--------------------|
| T0x0002 | 0x2a00 | 0x426c75656769676120546563686e6f6c6f6769657 | Device name, UTF-8 | 

属性には権限もあります。
- 読み取り可能/不可能
- 書き込み可能/書き込み不可
- 読み取り可能 および 書き込み可能/読み取り不可 および 書き込み不可
属性には、次のものも必要です。
- 読み取りまたは書き込みの認証
- 読み取りまたは書き込み権限
- 暗号化とペアリングによる読み取りまたは書き込み
属性の種類とハンドルは公開情報ですが、アクセス許可はありません。
したがって、読み取り要求または書き込み要求によって、
「読み取り/書き込みが許可されていません」または「認証が不十分です」というエラーが発生する可能性があります。

** Attribute Protocol Operations
属性プロトコルはステートレスシーケンシャルプロトコルです。
つまり、プロトコルにステートが格納されておらず、一度に1つの操作しか実行できません。
使用可能な属性プロトコルのメソッドについては、次の表で説明しています。

Attribute Protocol Methods
| Method                               | Description                                                       | Direction        |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Find Information (starting handle,   | Used to discover attribute handles and their types (UUIDs)        | Client -> Server |
| ending handle)                       |                                                                   |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Find By Type Value (starting handle, | Returns the handles of all attributes matching the type and value | Client -> Server |
| ending handle, type, value)          |                                                                   |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Read By Group Type (starting handle, | Reads the value of each attribute of a given type in a range      | Client -> Server |
| ending handle, type)                 |                                                                   |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Read By Type (starting handle,       | Reads the value of each attribute of a given type in a range      | Client -> Server |
| ending handle, type)                 |                                                                   |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Read (handle)                        | Reads the value of given handle                                   | Client -> Server |
|                                      | Maximum payload : 250 bytes                                       |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Read Blob (handle, offset)           | Can be used to read long attributes larger than 250 bytes         | Client -> Server |
|                                      | Maximum payload: 64 kB                                            |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Read Multiple ([Handle]*)            | Used to read multiple values at the same time                     | Client -> Server |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Write (handle, value)                | Writes the value to the given handle, with no response            | Client -> Server |
|                                      | Maximum payload: 250 bytes                                        |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Prepare Write (handle, offset,       | Prepares a write procedure, which is queued in server             | Client -> Server |
| value) and Execute (exec/cancel)     | until the write is executed.                                      |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Handle Value Notification (handle,   | Server notifies client of an attribute with a new value           | Server -> Client |
| value)                               | Maximum payload: 250 bytes                                        |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Handle Value Indication (handle,     | Server indicates to client an attribute with a new value.         | Server -> Client |
| value)                               | Client must confirm reception. Maximum payload: 250 bytes         |                  |
|--------------------------------------+-------------------------------------------------------------------+------------------|
| Error response                       | Any request can cause an error and error response                 | Server -> Client |
|                                      | contains information about the error                              |                  |

** Acknoledgements
ATT操作はオプションでAcknoledgement（ACK）を要求することができます。
これにより、アプリケーションはどのデータパケットが正常に送信されたかを知ることができ、非常に信頼性の高いアプリケーションを設計することができます。
サーバーは、クライアントからのACKを待たなければならないため、データのスループットが影響を受けます。
Non-ACK操作は、接続間隔内で複数の操作を実行できるため、高いスループットを必要とするアプリケーションで使用できます。
Link Layerは失われたパケットをまだ再送しますので、信頼性には影響しませんが、アプリケーションはどのパケットが正常に送信されたかを知ることができません。
両方の操作を次の図に示します。

[[file:ACK and non-ACK Data Transfer.png][ACK and non-ACK Data Transfer]]

* Generic Attribute Profile (GATT)
汎用属性プロファイル（GATT）は、属性プロトコル（ATT）の上に構築され、属性プロトコルによって転送および格納されるデータの共通フレームワークを確立します。
GATTは、サーバーとクライアントという2つの役割を定義しています。
GATTサーバは、属性プロトコルを介して転送されたデータを格納し、GATTクライアントからのATT要求を受け入れます。
一方、GATTサーバは要求に対する応答を送信し、設定されると、GATTサーバ上でイベントが発生したときにGATTクライアントに通知および通知を送信します。
GATTは、GATTサーバに含まれるデータの形式も指定します。
属性プロトコルによって転送される属性は、サービスおよび特性としてフォーマットされます。
サービスには、特性の集合が含まれる場合があります。
特性には、特性値を記述する単一の値と任意の数の記述子が含まれます。
Bluetoothプロファイルは、データが交換される構造を指定します。
プロファイルは、プロファイルで使用されるサービスや特性などの要素を定義しますが、セキュリティと接続確立パラメータの定義も含む場合があります。
通常、プロファイルは、心拍数モニタリングやケイデンスモニタリングなどの高レベルのユースケースを達成するために必要な1つ以上のサービスで構成されます。
標準化されたプロファイルにより、デバイスおよびソフトウェアベンダーは、相互運用可能なデバイスおよびアプリケーションを構築することができます。
Bluetooth SIG標準化プロファイルはプロファイル仕様で定義されています。
これらはhttps://developer.bluetooth.org/gatt/profiles/Pages/ProfilesHome.aspx から入手できます。

Services
Servicesは、完全なユースケースではなく、バッテリ監視や温度データなど、デバイスの特定の機能を達成するために使用される1つ以上の特性で構成されたデータの集合です。
標準化されたBluetooth SIGは、https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx にあるサービス仕様で定義されています。

Characteristics
Characteristicsは、（1）データおよび/または（2）制御情報を公開および/または交換するために、サービスにおいて使用される値である。
Characteristicsはよく定義された既知の形式です。また、値にアクセスする方法、セキュリティ要件を満たす必要があるかどうか、オプションで特性値をどのように表示または解釈するかについての情報も含まれています。
Characteristicsには、特性データの表示または通知の値または許可構成を記述する記述子も含まれます。
標準化された特性は、特性仕様書で定義されています。
これらはhttps://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicsHome.aspx にあります。

以下の図は、GATTクライアント、GATTサーバ、サービス、特性と特性宣言、データと記述子の関係を示しています。

[[file:GATT Data Structure and Operation.png][GATT Data Structure and Operation]]

* Bluetooth Low Energy Security
Bluetooth Low Energy技術による通信が常に安全で保護されていることを確認するため、技術はデータの信頼性、完全性、プライバシー、および暗号化を保証するためのいくつかの機能を提供します。
最初のセクションでは、Bluetooth Low Energyセキュリティ技術の概要を説明します。
以降のセクションでは、以下のトピックについて詳しく説明します。
- ペアリング
- 暗号化
- プライバシー

** What Protection Does Bluetooth Security Provide?
Bluetoothの仕様では、ユーザーのデータとIDを保護するセキュリティ機能が定義されています。
Bluetooth Low Energy技術で使用されるセキュリティ機能は、NISTに準拠しているかFIPSで承認されています。
Bluetooth Low Energy技術は、3つの基本的なセキュリティサービスを提供します。
- 認証と認可 ::  デバイス間の信頼関係を確立する
- 暗号化とデータ保護 :: データの完全性と機密性の保護
- プライバシーと機密性 :: デバイストラッキングの防止

Bluetoothセキュリティモデルには、5つのセキュリティ機能が含まれています。
- ペアリング :: 共有秘密鍵を作成するプロセス
- ボンディング :: 後で使用できるようにペアリング中に作成されたキーを保存する
- デバイス認証 :: 保存されたキーの検証
- 暗号化 :: データ機密性
- メッセージの整合性 :: データ変更に対する保護

セキュリティマネージャは、次の責任を負います。
- ペアリング
- キー配布
- ハッシュと短期キーの生成

一方、リンク層は、データの暗号化と解読を担当します
Bluetooth Low Energyセキュリティ機能は、無線通信における以下の共通の脅威からの保護を提供します。

*人間の手による保護*
MITM（Man-in-the-Middle）攻撃には、メッセージを監視、変更、またはメッセージを通信に注入する能力が必要です。
たとえば、攻撃者が実際に完全に制御されているプラ​​イベート接続を介して互いに直接通信していると思われる2人のパーティーの間でメッセージをリッスンしてリレーするアクティブな盗聴を行うことができます。
Bluetooth Low Energy技術は、デバイスがパスキー入力または帯域外ペアリングのいずれかの方法でペアになっている場合、
MITM攻撃から保護します。
LEセキュア接続と数値比較ペアリング方法は、Bluetooth 4.2以降の規格を使用するデバイスでも使用できます。

*受動的な盗聴からの保護*
受動的な盗聴とは、他人のコミュニケーションに対して受動的に（例えばスニッファを使用して）聞いていることを意味します。
受動的な盗聴から保護するために、LE Secure ConnectionはECDH公開鍵暗号方式を使用します。
これは、セキュリティで保護されていないチャネルを介した鍵交換を可能にするため、受動的な盗聴攻撃に対して非常に高い強度を提供します。

*プライバシー保護*
ほとんどのBluetooth Low Energyデバイスは、それらに関連付けられたアドレスを有し、そのアドレスが広告パケット内に搬送されるので、
それらを追跡するためにデバイスにそのアドレスを関連付けることが可能である。
Bluetooth Low Energy技術のプライバシー機能と頻繁に変化するアドレスは、トラッキングから保護するために使用できます。

** Pairing and Bonding
Bluetoothペアリングは、関連する関係者が信頼関係を設定し、データ交換に使用される暗号化キーを生成するために、
自分の識別情報を交換するプロセスです。
Bluetooth Low Energy技術は、アプリケーションのセキュリティ要件に応じて、ペアリングのための複数のオプションを提供します。
Bluetooth Low Energy標準バージョン4.0および4.1は、ユーザーがデバイスの入出力機能に基づいて、
Just Works、Passkey EntryおよびOut-of Bandメカニズムから1つの方法を選択できるSecure Simple Pairingモデルを使用します。
BluetoothのLow Energy標準バージョン4.2のセキュリティは、新しいLEセキュア接続のペアリングモデル、数値比較方法の追加、
ECDH（Elliptical Curve Diffie Hellman）キー交換アルゴリズムの導入によって強化されています。
以下の表は、それらのサポートされているI/O機能（BLUETOOTH仕様バージョン4.2 [VOL 1、パートA] 5.4.1アソシエーションモデル）に応じて
両当事者の間で使用することができるアソシエーションモデルを要約します。
ペアリングという用語は、セキュリティキーの生成と交換を意味し、
ボンディングという用語はセキュリティキーの格納を指し、後で使用することができます。

|           |              |                | Initiator      |                  |                  |
|-----------+--------------+----------------+----------------+------------------+------------------|
| Responder | Display Only | Display YesNo  | Keyboard Only  | NoInput NoOutput | Keyboard Dsiplay |
|-----------+--------------+----------------+----------------+------------------+------------------|
| Display   | Just Works   | Just Works     | Psskey         | Just Works       | Passkey          |
| Only      | Unauthenti-  | Unauthenti-    | Entry:         | Unauthenti-      | Entry:           |
|           | cated        | cated          | responder      | cated            | responder        |
|           |              |                | displays, ini- |                  | displays, ini-   |
|           |              |                | tiator inputs  |                  | tiator inputs    |
|           |              |                | Authenti-      |                  | Authenti-        |
|           |              |                | cated          |                  | cated            |
|-----------+--------------+----------------+----------------+------------------+------------------|
| Display   | Just Works   | Just Works     | Psskey         | Just Works       | Psskey           |
| YesNo     | Unauthenti-  | (For LE Legacy | Entry:         | Unauthenti-      | Entry(For        |
|           | cated        | Pairing)       | responder      | cated            | LE Legacy        |
|           |              | Unauthenti-    | displays ini-  |                  | Pairing):        |
|           |              | cated          | tiator inputs  |                  | responder        |
|           |              |                | Authenti-      |                  | displays, ini-   |
|           |              |                | cated          |                  | tiator inputs    |
|           |              |                |                |                  | Authenti-        |
|           |              |                |                |                  | cated            |
|-----------+--------------+----------------+----------------+------------------+------------------|
|           |              | Numeric        |                |                  | Numeric          |
|           |              | Comparison     |                |                  | Comparison       |
|           |              | (For LE        |                |                  | (For LE          |
|           |              | Secure Con-    |                |                  | Secure Con-      |
|           |              | nections)      |                |                  | nections)        |
|           |              | Authenti-      |                |                  | Authenti-        |
|           |              | cated          |                |                  | cated            |

|           | Initiator     |                |                |             |                |
|-----------+---------------+----------------+----------------+-------------+----------------|
| Responder | DisplayOnly   | Display        | Keyboard       | NoInput     | Keyboard       |
|           |               | YesNo          | Only           | NoOutput    | Display        |
|-----------+---------------+----------------+----------------+-------------+----------------|
| Keyboard  | Psskey        | Psskey         | Passkey        | Just Works  | Passkey        |
| Only      | Entry:initia- | Entry:initia-  | Entry:initia-  | Unauthenti- | Entry:initia-  |
|           | tor displays, | tor displays,  | tor and        | cated       | tor displays,  |
|           | responder     | responder      | responder      |             | responder      |
|           | inputs        | inputs         | inputs         |             | inputs         |
|           | Authenti-     | Authenti-      | Authenti-      |             | Authenti-      |
|           | cated         | cated          | cated          |             | cated          |
|-----------+---------------+----------------+----------------+-------------+----------------|
| NoInput   | Just Works    | Just Works     | Just Works     | Just Works  | Just Works     |
| NoOutput  | Unauthenti-   | Unauthenti-    | Unauthenti-    | Unauthenti- | Unauthenti-    |
|           | cated         | cated          | cated          | cated       | cated          |
|-----------+---------------+----------------+----------------+-------------+----------------|
| Keyboard  | Passkey       | Passkey        | Passkey        | Just Works  | Passkey        |
| Display   | Entry:initia- | Entry(For      | Entry:         | Unauthenti- | Entry(For      |
|           | tor displays, | LE Legacy      | responder      | cated       | LE Legacy      |
|           | responder     | Pairing):      | displays, ini- |             | Pairing):      |
|           | inputs        | initiator dis- | tiator inputs  |             | initiator dis- |
|           | Authenti-     | plays,         | Authenti-      |             | plays,         |
|           | cated         | responder      | cated          |             | responder      |
|           |               | inputs         |                |             | inputs         |
|           |               | Authenti-      |                |             | Authenti-      |
|           |               | cated          |                |             | cated          |
|-----------+---------------+----------------+----------------+-------------+----------------|
|           |               | Numeric        |                |             | Numeric        |
|           |               | Comparison     |                |             | Comparison     |
|           |               | (For LE        |                |             | (For LE        |
|           |               | Secure Con-    |                |             | Secure Con-    |
|           |               | nections)      |                |             | nections)      |
|           |               | Authenti-      |                |             | Authenti-      |
|           |               | cated          |                |             | cated          | 

  



