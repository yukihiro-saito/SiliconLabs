#+STARTUP: indent inlineimages fninline
#+OPTIONS: ^:nil
このドキュメントは、Silicon LabsのBluetoothスタックを使用してSilicon Labs Wireless Gecko製品の
Cベースアプリケーションを開発しているすべての人にとって不可欠なリファレンスです。
このガイドでは、Bluetoothスタックアーキテクチャ、アプリケーション開発フロー、MCUコアと周辺機器の使用法と制限、
スタック構成オプション、およびスタックリソース使用法について説明します。

* Introduction
このドキュメントは、Silicon Labs BluetoothスタックのC開発者ガイドです。
このドキュメントはさまざまな開発の角度をカバーしており、Bluetoothスタックを実行している
C for Wireless Gecko製品を開発しているすべての人にとって重要な参考資料です。
このドキュメントでは、次のトピックについて説明します。
- Section2のApplication Development Flowでは、アプリケーション開発の流れとプロジェクト構造について説明します。
- Section4のConfiguring the Bluetooth Stack and a Wireless Gecko Deviceでは、ライブラリを含むプロジェクトと実際のアプリケーションコードによるWireless Geckoの設定について説明します。
- Section5のBluetooth Stack Event Handlingは、Silicon LabsのBluetooth Stackを使用して開発するすべての人にとって重要な要素です。イベントベースのアーキテクチャにおいて、アプリケーションがスタックとどのように同期して動作するかを説明しています。
- Section6のInterruptsとSection7のWireless Gecko Resourcesは、周辺機器やチップセットのリソースについて話題に触れ、スタック使用のために予約されているもの、割り込みの処理方法、アプリケーションの為のスタックのメモリフットプリントと利用可能なメモリを含みます。

** Perequisites
このドキュメントでは、Silicon LabsのBluetooth SDK 2.3.0以降が開発マシン（Windows、MAC OSX、またはLinux）に正しくインストールされていること、
およびクイックスタートガイドとSDKの例に精通していることを前提としています。
また、読者はBluetooth技術についての基本的な知識が必要です。詳細については、UG104.13：アプリケーション開発の基礎：Bluetoothテクノロジを参照してください。

* Application Development Flow
次の図は、高度なファームウェア構造を示しています。開発者は、スタックの一番上にアプリケーションを作成します。
このスタックは、Silicon Labsがプリコンパイル済みのオブジェクトファイルとして提供し、エンドデバイスのBluetooth接続を可能にします。

Bluetoothスタックには、次のブロックが含まれています。
- Bootloader … 現在、3つのBootloadeが提供されています。詳細については、「UG103.06：アプリケーション開発の基礎：ブートローディング」を参照してください。
  - Legacy OTA（Over-the-Air）ファームウェアアップデート
  - Legacy UART DFU（デバイスファームウェアアップデート）
  - Gecko Bootloader 詳細については、UG266：Gecko BootloaderユーザーガイドおよびAN1086：Silicon Labs BluetoothアプリケーションでのGeckoブートローダの使用を参照してください。
- Bluetooth Stack … link layer、汎用アクセスプロファイル、セキュリティマネージャ、アトリビュートプロトコル、および汎用アトリビュートプロファイルで構成されるBluetooth機能。
- OTA supervisor … bootloaderの後に起動するアプリケーション。ユーザーアプリケーションが有効かどうかをチェックし、
有効な場合はスーパーバイザがアプリケーションを起動します。アプリケーションイメージが有効でない場合、
スーパバイザは設定されたブートローダを起動して、有効なアプリケーションイメージを受信しようとします。
これには、従来のOTAブートローダまたはGeckoブートローダを使用する必要があります。

** Application Build Flow
プロジェクトの構築は、QSG139：Simplicity StudioのBluetoothアプリケーション開発で説明しているように、
Bluetooth Services と Characteristics（GATT定義）を定義し、
Silicon Labs提供のサンプルまたは空のプロジェクトテンプレートから
アプリケーションソースコードを作成することから始まります。
SDK v2.1.0以降には、Bluetooth SevicesとCharacteristicsを定義する2つの方法があります。
最初のオプションはSimplicity StudioのVisual GATT Editor GUIです。
これは、GATTを設計し、gatt_db.cとgatt_db.hを生成するためのグラフィカルなツールです。
さらに、.xmlおよび.bgproj GATT定義ファイルをインポートできます。
Visual GATTエディタは、Simplicity StudioプロジェクトのGATT定義と生成のためのデフォルトツールです。
2番目のオプションは、UG118：Blue Gecko Bluetooth Profile Toolkit開発者ガイドに従って.xmlまたは.bgprojを作成し、
GATT定義ファイルを.cおよび.hに変換するための事前コンパイル手順としてBGBuild実行可能ファイルを使用することです。
この方法は、IAR Embedded Workbenchプロジェクトで使用されます。
プロジェクトをコンパイルすると、オブジェクトファイルが生成され、SDKで提供されているコンパイル済みのライブラリとリンクされます。
リンクの出力は、サポートされているワイヤレスGeckoデバイスにプログラムできるフラッシュイメージです。

* Project Structure
このセクションでは、アプリケーションプロジェクトの構造と、プロジェクトに含める必要がある必須およびオプションのリソースについて説明します。
** Bluetooth Stack and Bootloader Libraries
Bluetooth stack ライブラリは、
+ binbootloader.o : ブートローダイメージ（コンパイル済みレガシーOTAブートローダ）。このファイルは、EFR32xG1デバイスでのみサポートされている従来のブートローダに必要です。 v2.3.0 SDKから、すべてのEFR32デバイスをサポートする統一されたGeckoブートローダが利用できます。詳細は、「UG266：Silicon Labs Gecko Bootloader User Guide」を参照してください。
+ binstack.o : Bluetoothスタックで使用されるBluetoothスタック、スーパーバイザ、およびライブラリのバイナリイメージ。
+ stack.a : アプリケーションと共有されるBluetoothスタック、EMLIB、EMDRVのシンボルをエクスポートします。
+ bgapi.a : コア以外の機能のBGAPIコマンドを実装します。SDK v2.3.0から、すべてのプロジェクトにbgapi.aを含める必要があります。古いSDKでは、NCPアプリケーションに含める必要があります。

** GATT Database
GATT（Generic Attribute Profile）databaseは、BluetoothデバイスのBluetoothプロファイル、サービス、および特性を標準化した方法で記述したものです。
Silicon LabsのBluetoothスタックを使用すると、GATT定義はSimplicity StudioのVisual GATT Editor GUIで直接編集したり、XMLで記述したり、ビルド前のタスクとしてBGBuild実行可能ファイルに渡したりすることができます。
GATTデータベースの作成方法と構文の詳細については、UG118：Blue GeckoBluetooth®Smart Profile Toolkit開発者ガイドを参照してください。

*** gatt_db.h
gatt_db.hヘッダーファイルは、BGBuild.exeまたはVisual GATT Editorによって自動的に生成されたGATTデータベース構造を表しています。
GATTの型定義は、gatt_db_def.hからgatt_db.hに自動的に組み込まれます。

** EMLIB and EMDRV Peripheral Source Code
EMLIBは、Silicon LaboratoriesのすべてのEFM32、EZR32、EFR32 MCUおよびSoC用に統一されたAPIを提供する、低レベルの周辺サポートライブラリです。
EMDRVは、EFR32のオンチップ周辺機器用の機能固有の高性能ドライバのセットです。
ドライバは、通常、DMAベースであり、利用可能なすべての低エネルギー機能を使用します。
ほとんどのドライバでは、APIは同期関数と非同期関数の両方を提供します。

開発者は、プロジェクトに含める周辺機器ドライバを選択できます。
EMDRVソースコードの必要なファイルは、スタックに予約されたリソースを使用せず、
ラジオ割り込みを最優先に割り当てることを念頭において、プロジェクトに含めることができます。
Section6.InterruptsとSeciton7.Wireless Gecko Resourcesでは、割り込みとリソースの制約について詳しく説明しています。
EMLIBとEMDRVの詳細については、Gecko SDK APIのドキュメントとさまざまなアプリケーションノートを参照してください。

** aat.h
AAT（Application Address Table）は、ファームウェア更新ファイル形式EBLのサポート構造（メタデータ）であり、
アップグレードイメージ内のアプリケーションのサイズと場所を定義します。
これは、アプリケーションイメージの最初の項目であり、アプリケーションベクタテーブルへのポインタを持っています。
スタック管理者は、アプリケーションを呼び出す前に、アプリケーションベクタテーブルを初期化し、ベクタテーブルからスタック位置を呼び出します。

AATはGBLアップグレードイメージ内でアプリケーションのサイズと場所を定義しませんが、依然として必要です。
したがって、AATはすべてのプロジェクトの必須部分であり、アプリケーションにはaat.hヘッダーファイルが含まれている必要があります。

** application_properies.c
このファイルには、型、バージョン 、およびセキュリティなど、アプリケーションイメージに関する情報を含むアプリケーションプロパティ構造体が含まれています。
この構造体は、Gecko Bootloader APIのapplication_properties.hに定義されています（<Simplicity Studio Gecko SDK> \ platform \ bootloader \ documentation \ Gecko_Bootloader_API_Reference \ index.htmlのGecko Bootloader APIリファレンスを参照してください）。
あらかじめ生成されたファイルはSimplicity Studioプロジェクトに含まれており、アプリケーション固有のプロパティを含むように変更することができます。
アプリケーションのプロパティには、Gecko Bootloader APIを使用してアクセスできます。
以下のメンバーは、定義を変更することによって更新できます。

#+BEGIN_SRC c
// Version number for this application (uint32_t)
#define BG_APP_PROPERTIES_VERSION
// Capabilities of this application (uint32_t)
#define BG_APP_PROPERTIES_CAPABILITIES
// Unique ID (e.g. UUID or GUID) for the product this application is built for (uint8_t[16])
#define BG_APP_PROPERTIES_ID
#+END_SRC

OTA Supervisorを使用している場合、アプリケーションプロパティのapp.capabilities構造体メンバには、Bluetoothスタックのバージョン番号が含まれている必要があります。

#+BEGIN_SRC c
#define BG_APP_PROPERTIES_CAPABILITIES (BG_VERSION_MAJOR << 24) | (BG_VERSION_MINOR << 16) | (BG_VERSION_PATCH << 8)
#+END_SRC

Gecko Bootloaderを使用している場合、アプリケーションのプロパティー構造は必須であり、フラッシュ内のどこにでも置くことができます。

** native_gecko.h
このファイルには2つの目的があります。
最初に、実際のBluetoothスタックAPIと、スタックの為のコマンドとイベントが含まれています。
次に、Bluetoothスタックに構成、イベント、およびスリープ管理のAPIを提供します。
構成、イベント、およびスリープ管理APIについては、以下で説明します。

void gecko_init(const gecko_configuration_t* config)

この関数は単一の引数を取ります。 それは、gecko_configuration_t構造体へのポインタです。
その目的は、構造体に提供されているパラメータを使用してBluetoothスタックを設定および初期化することです。
設定オプションとgecko_init（）の使い方については、次のセクションで詳しく説明します。
Bluetoothスタックを初期化するには、アプリケーションがgecko_init（）を呼び出す必要があります。

SDK v2.3.0以降、この関数は非推奨ですが、下位互換性を維持するために機能します。

void gecko_stack_init(const gecko_configuration_t* config)

この関数は単一の引数を取ります。gecko_configuration_t構造体へのポインタです。
その目的は、構造体に提供されているパラメータを使用してBluetoothスタックを設定および初期化することです。
関数gecko_stack_init（）が呼び出されると、各スタック使用コンポーネントは個別に初期化されなければなりません。
この分離によって、必要でないスタック構成要素を含まないことによって、メモリの最適化が可能になります。
スタックコンポーネントを個別に初期化するには、次のAPIを使用できます。
+ gecko_bgapi_class_dfu_init（）;
+ gecko_bgapi_class_system_init（）;
+ gecko_bgapi_class_le_gap_init（）;
+ gecko_bgapi_class_le_connection_init（）;
+ gecko_bgapi_class_gatt_init（）;
+ gecko_bgapi_class_gatt_server_init（）;
+ gecko_bgapi_class_endpoint_init（）;
+ gecko_bgapi_class_hardware_init（）;
+ gecko_bgapi_class_flash_init（）;
+ gecko_bgapi_class_test_init（）;
+ gecko_bgapi_class_sm_init（）;

struct gecko_cmd_packet* gecko_wait_event(void)

これは、Bluetoothスタックからのイベントを待ち、イベントが受信されるまでブロックするブロック機能です。
イベントが受信されると、gecko_cmd_packet構造体へのポインタが返されます。
Bluetoothスタック構成でEMスリープモードが有効になっている場合、Bluetoothスタックからイベントが受信されていない場合、デバイスは自動的にEM1またはEM2モードになります。
gecko_wait_event（）を使用すると、可能な限りデバイスが最も低電力のスリープモードにあることを確認する最も簡単な方法です。

Bluetoothスタックのイベント処理については、第5章「Bluetoothスタックイベント処理」で詳しく説明しています。

struct gecko_cmd_packet* gecko_peek_event(void)

これは、BluetoothスタックからBluetoothイベントを要求するノンブロッキング機能です。
イベントが要求され、イベントキューが空でない場合、gecko_cmd_packet構造体へのポインタが返されます。
イベント・キューにイベントがない場合、NULLが戻されます。

この非ブロッキングイベントリスナを使用する場合、EMスリープモードは、アプリケーションスタックによって自動的に管理されないため、
アプリケーションコードによって管理する必要があります。スリープモードの管理はgecko_can_sleep_ms（）とgecko_sleep_for_ms（）関数で行います。
これについては後述します。

スタックのイベント処理については、第5章「Bluetoothスタックイベント処理」で詳しく説明しています。

int gecko_event_pending(void)

この関数は、Bluetoothスタックイベントがイベントキューに保留中であるかどうかを確認します。
保留中のBluetoothイベントが見つかった場合、関数はgecko_peek_event（）またはgecko_wait_even_t（）のいずれかで
イベントを処理する必要があることを示す0以外の値を返します。
イベントが見つからない場合は、ゼロが返されます。

uint32 gecko_can_sleep_ms(void)

この機能は、Bluetoothスタックがスリープできる時間を決定するために使用されます。
戻り値は、次のBluetooth操作が発生するまでスタックがスリープできるミリ秒数です。
スリープができない場合は、ゼロが返されます。
この関数は、非ブロッキングのgecko_peek_event（）イベント処理でのみ使用されます。

uint32 gecko_sleep_for_ms(uint32 max)

この関数は、単一パラメータで設定された最長時間（ミリ秒）の間、
スタックをEMスリープ状態にするために使用されます。
戻り値は、実際にスリープしているミリ秒数です。
スタックが外部イベントのために目を覚ます可能性があります。
この関数は、非ブロッキングのgecko_peek_event（）イベント処理でのみ使用されます。

** InitDevice.h
このヘッダファイルには、スタックの初期化を除き、デバイスの初期化関数が含まれています。
例えば、初期化機能は、クロックおよび電力管理を初期化しますが、
USART、I2C、ADC、GPIOなどの周辺ハードウェアインターフェイスも初期化します。
Bluetoothスタックと周辺機器の初期化については、
第4章のBluetoothスタックとワイヤレスGeckoデバイスの設定で詳しく説明しています。

** Radio Board-Specific Includes
Bluetooth SDKで提供されるいくつかの例では、LCDディスプレイや相対湿度/温度センサーなど、WSTK開発キットの特定の機能が使用されています。
これらの機能を使用するための簡素な関数は、スターターキットを使用した素早いプロトタイプ開発のために提供されています。
次のヘッダーファイルは、特定の無線ボード上の機能の設定を容易にします。

bspconfig.h

BSP（Board Support Package）ヘッダーには、無線ボード固有の設定が含まれており、
WSTKのIOをトグルするかスターターキットのLCDディスプレイを駆動するような
WSTK特有の機能のパラメーターとして使用されます。

flashpwr.h

このヘッダーファイルには、一部の無線ボード（たとえばBRD4100A）のSPIフラッシュチップを低電力モードに設定する機能が含まれています。
これは、例えば、SPIフラッシュが低電力モードでない場合、最低のEM2、EM3、またはEM4電流に達しないため、スリープ電流測定を行う場合に便利です。

pti.h / boards_pti.h

PTI（Packet Trace Interface）は、Wireless Gecko SoCの内蔵ブロックで、着信および発信無線パケットを生データとしてデバッグインターフェイスにルーティングします。
これらのパケットは、Simplicity Studioのネットワークアナライザでキャプチャして表示できます。
Network Analyzerには、Bluetoothパケット用のデコーダがあり、Bluetoothネットワークのデバッグ、分析、測定に使用できます。

PTIは、HWブロックをイネーブルするためにコード内で初期化する必要があり、
PTIピンを対応する無線ボードのピンにルーティングする必要があります。

* Configuration the Bluetooth Stack and a Wireless Gecko Device
BluetoothスタックとWireless Gechoでアプリケーションを実行するには、
MCUとその周辺機器を正しく設定する必要があります。
ハードウェアが初期化されたら、gecko_init（）関数を使用してスタックを初期化する必要があります。

** Wireless Gecko MCU and Peripherals Configuration

*** enter_DefaultMode_from_RESET()
enter_DefaultMode_from_RESET関数は、ボード設計に基づいてMCUコアおよびペリフェラル設定を初期化するために使用されます。
この関数はmain（）の先頭で呼び出さなければなりません。
アプリケーションがSilicon Labsのラジオボード用に開発されている場合、これらの設定はSDKで提供されている例で正しく設定されていますが、
カスタムハードウェアデザインのアプリケーションを作成する開発者は、
Simplicity Studioのハードウェアコンフィグレータを使用すると、
グラフィカルユーザーインターフェイスで周辺機器を設定でき、
コンフィグレータの変更を保存した後に自動的に設定コードが生成されます。
次のセクションでは、生成された構成コードについて説明します。

enter_DefaultMode_from_RESETは、異なるMCUおよび周辺装置ブロックを構成するように
特別に設計された機能のセットを呼び出します。

*** Bluetooth Clocks
クロック設定は、CMU_enter_DefaultMode_from_RESET関数で初期化されます。
クロック設定には、使用されているクロックソース（HFXO、LFXO、PLFRCO、およびLFRCO）、
チューニングなどのクロックパラメータ、ペリフェラルのクロックソースなどが含まれます。

- HFCLK
HFCLKは、無線プロトコルタイマ（PROTIMER）に使用されます。
HFCLKは、精度が少なくとも±50ppmでなければならない高周波クロックであり、
このクロックは十分に正確な外部水晶（HFXO）が必要です。
HFXOの初期化は、タイミングクリティカルな接続とスリープ管理のために外部水晶を構成します。
HFXOは高周波クロック（HFCLK）として設定し、Wireless GeckoのHFXO入力ピンに物理的に接続する必要があります。

- LFCLK
デバイスがHFCLKを停止し、スリープモードに入るためには、LFCLKクロックである別のクロックが必要です。
デバイスがスリープモードに入ると、PROTIMERの現在の状態が保存されます。
デバイスがウェイクアップすると、スリープクロックのティック数が計算され、それに応じてPROTIMERが調整されます。
無線にはPROTIMERが絶え間なく刻々と変化しているように見えます。
このクロックの精度は、デバイスの動作モードに依存します。
Adverisingやscanningの場合、精度はそれほど重要ではありませんが、
接続が開いているときは、精度は少なくとも±500ppmでなければなりません。
このクロックは、精度要件に応じて、LFXO、PLFRCO、またはLFRCOのいずれかによって駆動することができます。
デフォルト設定では、LFXOがワイヤレスGeckoに接続され、低周波クロック（LFCLK）として設定されています。
デザインにLFXOが接続されていないか、PLFRCOを使用できない場合は、
スリープをアプリケーションから明示的にディセーブルにする必要があり、
LFRCOをクロックソースとして使用するように設定する必要があります。
Section 4.2.3 スリープで説明したように、LFCLKが十分正確でない場合、
Bluetoothスタックが正しく動作するためにスリープモードを無効にする必要があります。

- HFXO CTUNE
これらのサンプルには、Silicon LabsのすべてのBluetoothモジュール、
リファレンスデザイン、および無線ボードで動作するようにデフォルトで設定されている
Crystal Tune（CTUNE）設定があります。
しかし、場合によっては、最終製品設計では、デバイスごとまたは設計ごとに特定の結晶較正が必要となります。
CTUNE値、uint_16 ctuneStedyStateは、CMU_HFXOInit_TypeDef h fxoInit構造体内のデザインに従って調整することができます。

#+BEGIN_SRC c
// $[High Frequency Clock Setup]
/* Initializing HFXO */
CMU_HFXOInit_TypeDef hfxoInit = CMU_HFXOINIT_DEFAULT;
hfxoInit.autoStartEm01 = 1; // HFXO started automatically
hfxoInit.ctuneSteadyState = 322; // HFXO CTUNE configuration
CMU_HFXOInit(&hfxoInit);
#+END_SRC

HFXOとLFXOの設定の詳細については、EFR32リファレンスマニュアルの第12章を参照してください。

注：Bluetoothスタックは、38.4 MHzのHFXO周波数のみをサポートしています。その他のHFXO周波数はサポートされていません。

*** DC-DC Configuration
DC-DC設定は、EMU_enter_DefaultMode_from_RESET機能で設定されます。
SDKの例では、Silicon LabsのBluetoothモジュール、ラジオボード、およびリファレンスデザインで動作するように
DC-DC構成が設定されていますが、カスタムデザインには特定のDC-DC設定が必要な場合があります。

#+BEGIN_SRC c
// $[EMU Initialization]
/* Initialize DCDC regulator */
EMU_DCDCInit_TypeDef dcdcInit = EMU_DCDCINIT_DEFAULT;

dcdcInit.powerConfig = emuPowerConfig_DcdcToDvdd;
dcdcInit.dcdcMode = emuDcdcMode_LowNoise;
dcdcInit.mVout = 1800;
dcdcInit.em01LoadCurrent_mA = 15;
dcdcInit.em234LoadCurrent_uA = 10;

dcdcInit.maxCurrent_mA = 200;
dcdcInit.anaPeripheralPower = emuDcdcAnaPeripheralPower_DCDC;
dcdcInit.reverseCurrentControl = 160;

EMU_DCDCInit(&dcdcInit);
#+END_SRC

DCDCの設定の詳細については、EFR32リファレンスマニュアルの第11章およびAN0948：電源構成およびDC-DCを参照してください。

** Bluetooth Stack Configuration with gecko_stack_init()
gecko_stack_init（）関数は、スリープモード設定、接続に割り当てられたメモリ、OTA設定など、
Bluetoothスタックを設定するために使用されます。
Bluetoothスタックが設定される前に、どのBluetoothスタック機能も使用できません。

Bluetoothスタック設定例：

#+BEGIN_SRC c
/* Gecko configuration parameters (see gecko_configuration.h) */
static const gecko_configuration_t config = {
.config_flags=0,
.sleep.flags=SLEEP_FLAGS_DEEP_SLEEP_ENABLE,
.bluetooth.max_connections=MAX_CONNECTIONS,
.bluetooth.heap=bluetooth_stack_heap,
.bluetooth.heap_size=sizeof(bluetooth_stack_heap),
.bluetooth.sleep_clock_accuracy = 100, // ppm
.gattdb=&bg_gattdb_data,
.ota.flags=0,
.ota.device_name_len=3,
.ota.device_name_ptr="OTA",
.pti = &ptiInit,
};
#+END_SRC

gecko_stack_init（）関数の設定オプションは、スリープの有効/無効、Bluetooth接続数、ヒープサイズ、GATTデータベース、OTA設定、およびPTIです。
クロックなどの初期化の残りの部分は、part_DefaultMode_from_RESET（）関数で設定されます。
この関数は、partおよびsetオプションに基づいて自動的にHardware Configuratorから生成されます。
関数gecko_stack_init（）が呼び出されると、使用される各スタックコンポーネントは個別に初期化されなければなりません。
この分離により、不要なスタックコンポーネントを含まないことでメモリの最適化が可能になります。

スタックコンポーネントを個別に初期化するには、次のAPIを使用できます。

| gecko_bgapi_class_dfu_init()           | enables device firmware upgrade (dfu) APIs.                                                                        |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_system_init()        | enables local device (system) APIs.                                                                                |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_le_gap_init()        | enables Generic Access Profile (gap) APIs.                                                                         |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_le_connection_init() | allows managing connection establishment, parameter setting, and disconnection procedures via the connection APIs. |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_gatt_init()          | enables the ability to browse and manage attributes in a remote GATT server via the gatt APIs.                     |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_gatt_server_init()   | enables the ability to browse and manage attributes in a local GATT database gatt_server APIs.                     |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_endpoint_init()      | allows the creation and deletion of endpoints as well as configuration of data routing via the endpoint APIs.      |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_hardware_init()      | enables access and configuration of the system hardware and peripherals via the hardware APIs.                     |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_flash_init()         | enables persistent store commands (flash) APIs that can be used to manage the user data in the flash memory.       |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_test_init()          | enables the DTM test APIs.                                                                                         |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_sm_init()            | enables the security manager (sm) APIs.                                                                            |
|----------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| gecko_bgapi_class_util_init()          | enables utility function APIs like atoi and itoa.                                                                  |



*** CONFIG_FLAGS
現在のフラグ:
| GECKO_CONFIG_FLAG_USE_LAST_CTUNE | 1=Overrides CTUNE to last saved value in PS Store.                                       |
|----------------------------------+------------------------------------------------------------------------------------------|
| GECKO_CONFIG_FLAG_SUPERVISOR     | 0=Normal application. OTA settings need to be saved to flash.                            |
|                                  | 1= Application is Supervisor for OTA and uses saved ota settings.                        |
|----------------------------------+------------------------------------------------------------------------------------------|
| GECKO_CONFIG_FLAG_RTOS           | 1=Application uses RTOS. Stack does not configure clocks, vectors, TEMPDRV, or sleeps as |
|                                  | they are provided by RTOS.                                                               | 

*** Mbedtls
これにより、スタックによって使用される暗号化ライブラリが構成されます。
Mbedtlsはクラス1（sl_*.c）とクラス2（slcl_*.c）の暗号操作のハードウェアアクセラレーションに使用するプラグインを提供します。
2つのプラグインクラスは互いに互換性がありません。
Bluetoothスタックはクラス2プラグインを使用しているため、アプリケーションで暗号関数を使用する場合は、クラス2プラグインも使用する必要があります。
暗号操作を使用する前に、暗号のハードウェアアクセラレーションを初期化する必要があります。
これは、使用する暗号デバイスのmbedtls_device_init（）およびmbdedtls_device_set_instance（）を呼び出すことによって実行されます。
デバイスコンテキストの初期化は一度だけ行う必要があります。
Bluetoothスタックは、暗号化デバイスの自動初期化を無効にする設定オプション *.mbedtls.flags* にGECKO_MBEDTLS_FLAGS_NO_MBEDTLS_DEVICE_INITフラグが設定されていない限り、
使用する暗号デバイスに対してこれを自動的に行います。
このフラグは、アプリケーションが暗号デバイスの初期化を処理する場合に設定する必要があります。
構成オプション *.mbedtls.dev_number* は、複数のBluetoothデバイスが使用可能な場合に、
Bluetoothデバイスが使用する暗号デバイスを定義します。
デフォルトは0です。

#+BEGIN_SRC c
.mbedtls.flags = 0, // GECKO_MBEDTLS_FLAGS_NO_MBEDTLS_DEVICE_INIT disable automatic
.mbedtls.dev_number = 0, // initialization of crypto deviceん
#+END_SRC

*** Sleep
Wireless GeckoのスリープモードEM2（エネルギーモード2）は、gecko_init（）関数で有効にする必要があります。
スリープフラグは、gecko_configuration_t構造体の一部です。
スリープを有効にするには、SLEEP_FLAGS_DEEP_SLEEP_ENABLEDフラグを設定する必要があります。
スリープモードは、セクション5.「Bluetoothスタックイベント処理」で説明されているように、
イベントをブロックする場合にスタックによって自動的に処理されます。
gecko_configuration_t構造体（main.c）でスリープを有効にする例：

#+BEGIN_SRC c
.sleep.flags = SLEEP_FLAGS_DEEP_SLEEP_ENABLE // EM sleeps enabled
#+END_SRC

スリープモードでは、正確な32 kHzの低周波クロック（LFCLK）がハードウェアに存在する必要があります。
Bluetoothスタックで正確なスリープクロックが利用できない場合、
低電力スリープモードに入ることはできません。
低消費電力スリープモードが不要なアプリケーションでは、LFXOを省略することができますが、
gecko設定構成のスリープフラグを次のように設定する必要があります。

#+BEGIN_SRC c
.sleep.flags = 0, // Sleeps disabled
#+END_SRC

*** Bluetooth Connections
スタックによって許可される同時Bluetooth接続の最大数は、
接続管理に割り当てられるメモリの量によって制限されます。
メモリは初期化時にgecko_init（）で割り当てられ、
定義#define MAX_CONNECTIONSによって決定されます。
接続ごとに約800バイトのRAM使用量が増加します。

Bluetooth接続数を1に制限する例

#+BEGIN_SRC c
#define MAX_CONNECTIONS 1
#+END_SRC

*** OTA Configuration
ファームウェアアップグレードの一部はOTA管理者アプリケーションによって処理されるため、
Bluetooth Over-the-Air（OTA）ファームウェアアップグレードが利用可能です。
OTAには、OTAフラグを使用して構成されたいくつかの構成オプションがあります。

注意：Gecko Bootloaderを使用する場合は、セキュリティのためにOTAフラグを使用しないでください。
代わりに、Gecko Bootloaderを使ってセキュリティを設定してください。
それ以外の場合は、OTAフラグを使用して、OTAサービスで使用されるOTAコントロールポイントおよびOTAデータ特性のセキュリティプロパティを制御できます。
これは、OTAファームウェア更新を実行するために必要なBluetoothセキュリティのレベルを制御します。
権限のないデバイスが新しいファームウェアイメージをデバイスにアップロードするのを防ぐため、
OTAフラグにセキュリティを使用することを強く推奨します。

#+BEGIN_SRC c
.ota.flags = 0, // 0x0 No restrictions
// 0x200 Authenticated write
// 0x100 Encrypted write
// 0x400 Bonded write
#+END_SRC

Wireless Geckoのデバイス名（SupervisorのOTAモードにある場合）と
デバイス名の長さは、gecko構成構造体を使用して設定できます。

#+BEGIN_SRC c
.ota.device_name_len = 3, // OTA name length
.ota.device_name_ptr = "OTA", // OTA Device Name
#+END_SRC

最後に、デバイスをOTA DFUモードに設定することは、信頼できるデバイスだけがその機能を持つように保護する必要があります。
OTAファームウェアアップデートの詳細については、AN1045：EFR32xG1およびBGM11xシリーズ製品用のBluetooth無線デバイスファームウェアアップデートおよびUG266：Silicon Labs Gecko Booloaderユーザーズガイドを参照してください。

*** PTI
gecko_init（)のPTI構造体は、インタフェースクロック速度、DCLKのピン、DFRAMEDOUT、およびモードを含むパケットトレース出力のインタフェース構成を設定するために使用されます。
各無線ボードのboards_pti.hは、その特定の無線ボード用の正しい設定を持っています。
カスタムデザインでは、ボードレイアウトに合わせて構造体を変更する必要があります。

*** Bluetooth 5 Advetisement Sets
Advertisementセットの最大数を定義する必要があります。
これらのセットは、新しいbt5_set_modeコマンドを使用して複数のadvetiserを開始するために使用できます。
各コンテキストは約60バイトのRAMを割り当てます。

#+BEGIN_SRC c
. uint8_t max_advertisers; //!< Maximum number of advertisers to support, if 0 defaults to 1
#+END_SRC

* Bluetooth Stack Event Handling
Wireless Geckos用のBluetoothスタックは、イベント駆動型アーキテクチャであり、
イベントはメインwhileループで処理されます。

** Blocking Event Listner

gecko_wait_event（）は、イベントがイベント・キューに出現するのを待ってイベント・ハンドラに戻すのを待つブロッキング・ウェイト関数の実装です。
これは、デバイスと接続を同期させたまま、最も効率的かつ自動的にスリープを管理するため、
Bluetoothスタックで推奨される動作モードです。
- gecko_wait_event（）関数は、イベントが受信されるまで内部メッセージキューを処理します。
- 保留中のイベントまたは処理するメッセージがない場合、デバイスはEM1またはEM2スリープモードになります。
- この関数は、受信したイベントを保持するgecko_cmd_packet構造体へのポインタを返します。
以下のコード断片は、起動後にadvertisingを設定するgecko_wait_event（）を使用した
iBeaconの例からの単純なメインwhileループを示しています。

#+BEGIN_SRC c
/* Main loop */
while (1) {
struct gecko_cmd_packet* evt;
/* Wait (blocking) for a Bluetooth stack event. */
evt = gecko_wait_event();
/* Run application and event handler. */
switch (BGLIB_MSG_ID(evt->header))
{
/* This boot event is generated when the system is turned on or reset. */
case gecko_evt_system_boot_id:
/* Initialize iBeacon ADV data */
bcnSetupAdvBeaconing();
break;
/* Ignore other events */
default:
break;
}
#+END_SRC

** Non-Blocking Event Listner
この動作モードでは、手作業による調整がより多く必要です。
たとえば、アプリケーションによってスリープ管理を行う必要があります。
いくつかの使用例では、非ブロッキング操作が必要です。
- gecko_peek_event（）関数は、イベントが受信されるか、すべてのメッセージが処理されるまで内部メッセージキューを処理します。
- この関数は、受信したイベントを保持するgecko_cmd_packet構造体へのポインタを返します。キューにイベントがない場合はNULLを返します。

*** Sleep and Non-Blocking Event Listner
アプリケーションが非ブロッキングのgecko_peek_event（）関数を使用してイベントハンドラを作成する場合、スリープの実装も異なります。
アプリケーションはgecko_can_sleep_ms（）を使用して、デバイスがスリープできる時間をスタックに問い合わせ、
gecko_sleep_for_ms（）関数を使用してその時間にスリープ状態にする必要があります。
gecko_can_sleep_ms（）関数またはgecko_ sleep_for_ms（）関数を呼び出す前に割り込みを無効にする必要があり、
関数が実行されると有効にする必要があります。
以下の例は、非ブロッキングイベント処理が使用されているときにスリープ管理を実装する方法を示しています。
*CORE_ENTER_ATOMIC（）*

#+BEGIN_SRC c
/* Main loop */
while (1) {
struct gecko_cmd_packet* evt;
CORE_DECLARE_IRQ_STATE;
/* Poll (non-blocking) for a Bluetooth stack event. */
evt = gecko_peek_event();
/* Run application and event handler. */
switch (BGLIB_MSG_ID(evt->header))
{
/* This boot event is generated when the system is turned on or reset. */
case gecko_evt_system_boot_id:
/* Initialize iBeacon ADV data */
bcnSetupAdvBeaconing();
break;
/* Ignore other events */
default:
break;
}
CORE_ENTER_ATOMIC(); // Disable interrupts
/* Check how long the stack can sleep */
uint32_t durationMs = gecko_can_sleep_ms();
/* Go to sleep. Sleeping will be avoided if there isn't enough time to sleep */
gecko_sleep_for_ms(durationMs);
CORE_EXIT_ATOMIC(); // Enable interrupts
}
#+END_SRC

* Interrupts
割り込みは、無線割り込みまたはIOピンからの割り込みであれば、それぞれの割り込みハンドラでイベントを作成します。
イベントは後でメッセージキューからのメインイベントループで処理されます。
アプリケーションは、常に割り込みハンドラ内の処理時間を最小限に抑え、イベントコールバックまたはメインループの処理を残しておく必要があります。
一般に、割り込み方式はイベントベースのプログラミングアーキテクチャに従っていますが、Bluetoothスタックにはいくつかのユニークで重要な例外があります。
- BGAPIコマンドは割り込みコンテキストから呼び出すことはできません。
- 割り込みコンテキストからは、gecko_external_signal（）関数のみを呼び出すことができます。
- 前のコード例に示すように、gecko_sleep_for_ms（...）を呼び出す前に割り込みを無効にする必要があります。

** External Event
外部イベントは、メインイベントループに渡され、そのループ内で処理される外部信号として、すべての周辺割り込みをキャプチャするために使用されます。
外部イベント割り込みは、いくつか例を挙げると、IO、比較器、またはADCなどの周辺割り込み源のいずれかから来ることができる。
信号ビット配列は、どの外部割り込みが発行されたかをイベントハンドラに通知するために使用されます。
- 外部信号の主目的は、割り込みコンテキストからメインイベントループにイベントをトリガすることです。
- BGAPIイベントであるsystem_external_signalは、void gecko_external_signal（uint32 signals）関数を呼び出すことで生成できます。
- 関数gecko_external_signalは、割り込みコンテキストから呼び出すことができます。
- gecko_external_signal関数のsignalsパラメータは、system_external_signalイベントに渡されます。

#+BEGIN_SRC c
/** Main */
void main()
{
...
//Event loop
while(1)
{
...
//External signal indication (comes from the interrupt handler)
case gecko_evt_system_external_signal_id:
// Handle GPIO IRQ and do something
// External signal command’s parameter can be accessed using
// event->data.evt_system_external_signal.extsignals
break;
...
}
}
/** Handle GPIO interrupts and trigger system_external_signal event */
void GPIO_ODD_IRQHandler()
{
static bool radioHalted = false;
uint32_t flags = GPIO_IntGet();
GPIO_IntClear(flags);
//Send gecko_evt_system_external_signal_id event to the main loop
gecko_external_signal(...);
}
}
#+END_SRC

** Priorities
無線が最も優先度の高い割り込みを持つことを強く推奨します。
これはデフォルト設定であり、他の割り込みは低い優先度で処理されます。
次の表は、異なる動作コンテキストで動作するBluetoothスタック内の3つの異なるコンポーネントと、
各コンポーネントが接続を保証するために割り込みを無効にする最大時間を示しています。

| Component  | Description                                                   | Timing accuracy | Operating Context | Maximum IRQ disable | What happens if timing requirements are ignored                                                                                                                            |   |
|------------+---------------------------------------------------------------+-----------------+-------------------+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---|
| Radio      | Time-critical low level TX/RX radio control                   | Microseconds    | Radio IRQ         | < ~10 μs            | Packets are not transmitted or received, which will eventually cause supervision timeout and Bluetooth link loss.                                                          |   |
|------------+---------------------------------------------------------------+-----------------+-------------------+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---|
| Link layer | Time-critical connection management procedures and encryption | Milliseconds    | PendSV IRQ        | < ~20 ms            | If the link control procedure is not handled in time, Bluetooth link loss may happen. Slaveside channel map update and connection update timings are controlled by master. |   |
|------------+---------------------------------------------------------------+-----------------+-------------------+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---|
| Host Stack | Bluetooth Host Stack, Security Manager, GATT                  | Seconds         | Application       | < 30 s              | SMP and GATT have a 30 s timeout and if operations are not handled within that timeout Bluetooth link loss will occur.                                                     |   | 

* Wireless Gecko Resources
Bluetoothスタックは、Wireless Geckoのリソースの一部を使用します。
これらのリソースは、アプリケーションでは使用できません。
次の表は、リソースの一覧とスタックによる使用方法を示しています。
最初の4つのリソース（赤色）は、常にBluetoothスタックによって使用されます。

| Category | Resource  | Used in software             | Notes                                                                                                                                                                                                |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| PRS      | PRS7      | PROTIMER RTC synchronization | PRS7 always used by the Bluetooth stack.                                                                                                                                                             |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Timers   | RTCC      | EM2 timings                  | Used for sleep timings. Both channels are always reserved. The application can only read the RTC value, but cannot write it or use RTCC.                                                             |
|          | PROTIMER  | Bluetooth                    | The application does not have access to PROTIMER.                                                                                                                                                    |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Radio    | RADIO     | Bluetooth                    | Always used and all radio registers are reserved for the Bluetooth stack.                                                                                                                            |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| GPIO     | NCP       | Host communication.          | 2 to 6 x I/O pins can be allocated for the NCP usage depending on used features (UART, RTS/CTS, wake-up and host wake-up). Optional to use, and valid only for NCP use case.                         |
|          | PTI       | Packet trace                 | 2 to N x I/O pins. Optional to use.                                                                                                                                                                  |
|          | TX enable | TX activity indication       | 1 x I/O pin. Optional to use.                                                                                                                                                                        |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| CRC      | GPCRC     | PS Store                     | Can be used in application, but application should always reconfigure GPCRC before use, and GPCRC clock must not be disabled in CMU.                                                                 |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Flash    | MSC       | PS Store                     | Can be used by application, but MSC must not be disabled.                                                                                                                                            |
|----------+-----------+------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| CRYPTO   | CRYPTO    | BLE link encryption          | The CRYPTO peripheral can only be accessed through the mbedTLS crypto library, not through any other means.The library should be able to do the scheduling between the stack and application access. |

SDK2.3では、ハードウェアコンフィグレータはPRS 0,1,2,3、および11チャンネルを不必要に予約します。
これらのPRSチャネルはスタックでは使用されませんが、GUIでは設定できません。

* Flash
Bluetoothスタックはフラッシュメモリから実行され、現在（v.2.0.0以上のソフトウェア）フラッシュの約半分が必要です。
フラッシュは、次の図に示すように、ブートローダー、Bluetoothスタック、GATTデータベース、およびPersistent Store（PSストア）のブロックに分割できます。
[[file:Flash-Usage.jpg]]
- Bluetoothスタックおよびアプリケーションのアップグレード可能性を有効にするには、ブートローダが不可欠です。ブートローダーは、ブートローダーの改良と機能追加を将来も使い続けられるように設計されています。
- Bluetoothスタックブロックには、リンクレイヤ、GAP、SM、ATT、GATTレイヤー、およびOTAアップグレード可能な小さな管理者アプリケーションと、Bluetoothスタックで必要なハードウェア固有のライブラリを含む、実際のBluetoothファームウェアが含まれています。
- GATTデータベースには、アプリケーションによって使用されるBluetoothサービスと特性が含まれています。そのサイズは、アプリケーションおよびいくつのGATTサービスと特性が含まれているかによって異なります。
- PSストアは不揮発性のデータストアで、Bluetoothスタックとアプリケーションの両方に、Bluetoothボンディングキー、アプリケーション構成データ、ハードウェア構成などの永続データを保存できます。PSストアは、フラッシュ。

次の表に、各ブロックのフラッシュ使用量とアドレス範囲を示します。
見積もりは、ユースケース、構成、アプリケーションリソース、およびSDKのバージョンによって異なります。
