#+OPTIONS: ^:nil
* 
* 
* 
* Simplicity Studioを使用したBluetoothアプリケーションの開発
** 
** 
** アプリケーション開発を始める
  Bluetoothアプリケーションの開発は、GATTデータベース構造の定義と、
  connection_opened、connection_closedなどのイベントのイベントハンドラの定義という
  2つの主要なステップから構成されています。
  アプリケーション開発の最も一般的な出発点は、SOC-Emptyのサンプルです。
  このプロジェクトには、簡単なGATTデータベース(汎用アクセスサービス、デバイス情報サービス、OTAサービスなど)と、
  スタックによって発生したイベントを処理するwhileループが含まれています。
  必要に応じて、この例のGATTデータベースとイベントハンドラの両方を拡張することができます。

  あなたのアプリケーション開発を始めるためには、次のステップに従ってください。
1. Launcher perspectiveにある[New Project]をクリックしてください
2. Blutooth SDKを選択して、[Next]をクリックしてください
3. SoC-Emptyを選択して、[Next]をクリックしてください
4. あなたのプロジェクトの名前を入力して、[Next]をクリックしてください
5. 選択したパーツが表示されていることを確認し、好みのツールチェーンを選択します。
注：ツールチェーンは1つだけ選択してください。
GCCを使用している場合は、IARのチェックを外す必要があります。
そうしないと、ファイルを生成するときにシステムがIARに戻ります。
Finishをクリックします。

数回のクリックで独自のGATTデータベースを作成できるように、
プロジェクトの作成後にvisual GATT editorが自動的に表示されます。 
Simplicity IDEパースペクティブボタンが画面の右上に表示されるようになりました。

この時点で独自のデータベースを作成したり、
後で左にあるプロジェクトエクスプローラペインで.iscファイルをクリックして戻ることができます。
詳細は、The GATT Editorを参照してください。

各特性のリファレンスが生成され、gatt_db.hで定義されます。
コード内のこの参照を使用して、
gecko_cmd_gatt_server_read_attribute_value（）または 
gecko_cmd_gatt_server_write_attribute_value（）コマンドを使用して、
GATTデータベース内の特性の値を読み書きすることができます。

プロジェクトエクスプローラでmain.cをダブルクリックして開きます。
メインループにイベントハンドラがあります。
他のイベントハンドラでこのリストを拡張することができます。
イベントの全リストとスタックコマンドは、
Bluetooth Software API Reference Manualにあります。

プロジェクトをビルドしてデバッグするには、
Simplicity IDEパースペクティブの左上隅にある[デバッグ]をクリックします。
プロジェクトをビルドしてダウンロードし、Debugパースペクティブを開きます。 
[再生]クリックして、デバイスでプロジェクトを実行します。
* The GATT Editor
すべてのBluetooth接続は、GATTクライアントとGATTサーバがあります。
サーバーはGATTデータベースを保持しています：クライアントが読み書きできる特性の集合。
特性はサービスにグループ化され、サービスのグループはBluetoothプロファイルを決定します。

GATTサーバを実装する場合（通常は周辺機器上に）、GATTデータベース構造を定義する必要があります。
この構造は実行時には変更できないため、事前に設計する必要があります。
クライアント（通常はセントラルデバイス）は、たとえクエリを実行するデバイスがなくても、
GATTデータベースを持つことができるため、コード内にデフォルトのデータベース構造を維持することができます。

GATTエディタは、独自のGATTデータベースを構築するのに役立つ使いやすいツールです。
事前定義されたプロファイル/サービス/特性/記述子のリストが左上のペインに表示され、
現在のGATTデータベース構造が右上のペインに表示されます。
オプションメニューは、データベースペインの右側に用意されています。

データベースペインのアイテムをクリックすると、右下のペインでその設定を表示および変更できます。
プロファイル/サービス/特性/記述子をデータベースに追加するには、
リストからデータベースにドラッグアンドドロップするだけです。

Profile / Service / Characteristic / Descriptorの詳細を表示するには、
リストまたはデータベースのいずれかをクリックします。説明が左下のペインに表示されます。
任意のプロファイル/サービス/特性/記述子の詳細な説明を見つけることができます。
またはhttps://www.bluetooth.com/specifications/gatt にあります。

特性は、一般に複雑なフィールド構造です。 
GATTエディタは現在、特性内の項目を一覧表示しません。
特性にどの項目があるか知りたい場合は、
https://www.bluetooth.com/specifications/gatt/characteristics にアクセスしてください。

GATTエディタを使用する例として、アプリケーションがデバイスの現在の時刻を照会できるようにしたいとします。
この目的のために、A predefined Time Profileが提供される。
これには、現在時刻サービス、次のDST変更サービス、および参照時刻更新サービスの3つのサービスが含まれます。
最も単純な場合は、参照元とDSTの変更には関心がなく、現在の時刻のみを知りたい場合です。
現在のタイムサービスは、[Services]で見つけることができます。
現在の時間特性、現地時間情報特性、および参照時間情報の3つの特性が含まれています。
このサービスをドラッグアンドドロップするだけで、データベースに追加することができます。

ただし、タイムゾーン、DST設定、およびクロック参照プロパティについても知りたくないとします。
あなたは本当に時間のみが必要だとします。
Characteristicsはサービスの一部にしかなり得ないので、独自のサービスを定義する必要があります。
例えばSimple Time Serviceと呼びます。
[オプション]メニューの[新しいアイテムの作成]（次の図の1）をクリックし、
新しいサービスを追加します。
カスタムサービスがデータベースに表示されます。
右下のペインで、Simple Time Service(2)に名前を変更します。
カスタムサービス用に128ビットのUUIDが自動的に生成されます。
今度は、あなたのSimple Time Service(3)の下に
Current Time Characteristicをドラッグ＆ドロップできます。

[値の設定]で長さを2〜10バイトに変更します。

「プロパティ情報の設定」は、最初は空です。
表示されている5つのプロパティを追加します(4)。
リモートデバイスから特性を書き込みたい場合は、
writeプロパティをtrueに設定することもできます。

gatt.xml - データベース構造のxml形式の記述。

gatt_db.h - characteristicハンドルの定義を含むヘッダファイル。
これらの定義を参照することによって、characteristicの値を読み書きすることができます。 定義名は、GATTエディタで指定されたIDから生成されます。

gatt_db.c - characteristicのデフォルト値を定義するソースファイル。

Characteristicsのfield構造は定義されていないため、
https://www.bluetooth.com/specifications/gatt/characteristics 
に基づいて手動で追加する必要があります。
たとえば、Current Time Characteristicsには次の構造があります。

PACKSTRUCT(struct date_time_t{
uint16 year;
uint8 month;
uint8 day;
uint8 hours;
uint8 minutes;
uint8 seconds;
});

PACKSTRUCT(struct day_of_week_t {
uint8 day;
});

PACKSTRUCT(struct day_date_time_t {
struct date_time_t date_time;
struct day_of_week_t day_of_week;
});

PACKSTRUCT(struct exact_time_256_t {
struct day_date_time_t day_date_time;
uint8 fractions_256;
});

PACKSTRUCT(struct current_time_t {
struct exact_time_256_t exact_time_256;
uint8 adjust_reason;
});

ほとんどのCharacteristicsはこれよりはるかに単純な構造を持ち、
そのうちのいくつかは単に数値か文字列です。
この構造体のサイズを計算すると、
Current Time Characteristicの(値設定)の長さプロパティに一致する10バイトが得られます。
32ビットへの構造展開を避けるためにPACKSTRUCT命令が必要です。

これで、データベースのcharacteristicの値を以下の例のように変更することができます。
struct current_time_t current_time = {{{{2016,11,25,17,43,00},{5}},0},1};

gecko_cmd_gatt_server_write_attribute_value(gattdb_current_time, 0, sizeof(struct current_time_t),
(uint8*)&current_time);
